# ############################################################################
# Model: Tokenized TTS (WhisperSpeech-inspired)
# Authors:  Artem Ploujnikov
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 74443
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/transformer/<seed>
output_wer_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

encodec_model: "facebook/encodec_24khz"
vocoder_model: "charactr/vocos-encodec-24khz"

# Data files
data_folder: !PLACEHOLDER # e.g., /path/to/LibriSpeech
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_annotation: !ref <save_folder>/train.json
valid_annotation: !ref <save_folder>/valid.json
test_annotation: !ref <save_folder>/test.json
samples_folder: !ref <output_folder>/samples
num_audio_samples: 32 

splits: ["train", "valid", "test"]
split_ratio: [90, 5, 5]


ckpt_interval_minutes: 30 # save checkpoint every N min

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 100
batch_size: 16
grad_accumulation_factor: 1
max_grad_norm: 5.0
sorting: random
num_workers: 4
skip_prep: false
num_inference_samples: 16
overfit_test: False
overfit_test_sample_count: !ref <batch_size>
overfit_test_epoch_data_count: 1000


# index
pad_index: 0
bos_index: 0

# stages related parameters
lr: 0.001
guided_attention_weight: 1.0
guided_attention_sigma: 0.5

# Feature parameters
sample_rate: 22050
model_sample_rate: 24000
infer_max_audio_tokens: 700
debug_infer_max_audio_tokens: 10

#label encoder
label_encoder: !new:speechbrain.dataio.encoder.TextEncoder
token_list_file: ./hparams/char_en.txt


# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

test_dataloader_opts:
    batch_size: 1
    num_workers: !ref <num_workers>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

sample_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>            

extract_features_opts:
    dataloader_opts:
        batch_size: !ref <batch_size>
    encodec_model: !ref <encodec_model>
    sample_rate: !ref <sample_rate>
    model_sample_rate: !ref <model_sample_rate>


####################### Model parameters ###########################
# Transformer
d_model: 512
nhead: 4
num_encoder_layers: 6
num_decoder_layers: 12
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
audio_num_tokens: 1024
audio_emb_size: 512
text_num_tokens: 31
num_quantizers: 2
output_neurons: !ref <audio_num_tokens> * <num_quantizers>

# Outputs
blank_index: 0
label_smoothing: 0.0


############################## models ################################


model: !new:speechbrain.lobes.models.transformer.TransformerS2S.TransformerS2S # yamllint disable-line rule:line-length
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: transformer
    attention_type: regularMHA
    normalize_before: True
    causal: False

audio_emb: !new:speechbrain.lobes.models.transformer.Transformer.NormalizedEmbedding
    vocab: !ref <audio_num_tokens>
    d_model: !ref <d_model>

text_emb: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <text_num_tokens>
    embedding_dim: !ref <d_model>

tgt_in_proj: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <audio_emb_size> * <num_quantizers>
    n_neurons: !ref <d_model>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

vocoder: !new:speechbrain.lobes.models.huggingface_vocos.HuggingFaceVocos
    source: !ref <vocoder_model>

modules:
    model: !ref <model>
    seq_lin: !ref <seq_lin>
    text_emb: !ref <text_emb>
    audio_emb: !ref <audio_emb>
    tgt_in_proj: !ref <tgt_in_proj>
    vocoder: !ref <vocoder>

# define two optimizers here for two-stage training
opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

attn_cost: !new:speechbrain.nnet.loss.guidedattn_loss.GuidedAttentionLoss
    sigma: !ref <guided_attention_sigma>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: 25000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        seq_lin: !ref <seq_lin>
        audio_emb: !ref <audio_emb>
        text_emb: !ref <text_emb>
        tgt_in_proj: !ref <tgt_in_proj>
        noam_scheduler: !ref <noam_annealing>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
